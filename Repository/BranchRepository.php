<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Company;
use Doctrine\ORM\EntityRepository;

/**
 * BranchRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BranchRepository extends EntityRepository implements EntityRepositoryInterface
{
    /**
     * @param $branch
     * @return mixed
     */
    public function findOneByIdOrSlug($branch)
    {
        $qb = $this->createQueryBuilder('b');

        return $qb->where('b.id = :branch')
            ->orWhere('b.slug = :branch')
            ->setParameter('branch', $branch)
            ->getQuery()
            ->getOneOrNullResult();
    }

    /**
     * @param $filter
     * @param $orderBy
     * @param $orderDirection
     * @param $active
     * @param Company|null $company
     * @return \Doctrine\ORM\Query
     */
    public function filter($filter, $orderBy, $orderDirection, $active, Company $company = null)
    {
        $qb = $this->createQueryBuilder('branch')->join('branch.company', 'c');

        if (!empty($filter)) {
            $qb
                ->orWhere($qb->expr()->like('branch.id', ':filter'))
                ->orWhere($qb->expr()->like('branch.name', ':filter'))
                ->orWhere($qb->expr()->like('c.name', ':filter'))
                ->orWhere($qb->expr()->like('branch.address_1', ':filter'))
                ->orWhere($qb->expr()->like('branch.address_2', ':filter'))
                ->orWhere($qb->expr()->like('branch.city', ':filter'))
                ->orWhere($qb->expr()->like('branch.state', ':filter'))
                ->orWhere($qb->expr()->like('branch.zip', ':filter'))
                ->setParameter('filter', '%' . $filter . '%');
        }

        switch ($active) {
            case ('active'):
                $qb->andWhere('branch.active = true');
                break;
            case ('inactive'):
                $qb->andWhere('branch.active = false');
                break;
        }

        switch (strtolower($orderBy)) {
            case ('name'):
                $qb->orderBy('branch.name', $orderDirection);
                break;
            case ('company_id'):
                $qb->orderBy('branch.company_id', $orderDirection);
                break;
            case ('company_name'):
                $qb->orderBy('company.name', $orderDirection);
                break;
            case ('address_1'):
                $qb->orderBy('branch.address_1', $orderDirection);
                break;
            case ('address_2'):
                $qb->orderBy('branch.address_2', $orderDirection);
                break;
            case ('city'):
                $qb->orderBy('branch.city', $orderDirection);
                break;
            case ('state'):
                $qb->orderBy('branch.state', $orderDirection);
                break;
            case ('zip'):
                $qb->orderBy('branch.zip', $orderDirection);
                break;
            default:
                $qb->orderBy('branch.id', $orderDirection);
        }

        if (null !== $company) {
            $qb
                ->andWhere('c.id = :companyId')
                ->setParameter(':companyId', $company->getId());
        }

        return $qb->getQuery();
    }

    /**
     * @return mixed
     */
    public function getCount()
    {
        return $this->createQueryBuilder('b')
            ->select('count(b.id)')
            ->getQuery()
            ->getSingleScalarResult();
    }

    /**
     * @param string $slug
     * @param null $excludeId
     * @return bool
     */
    public function isSlugUnique($slug, $excludeId = null)
    {
        $qb = $this->createQueryBuilder('b');

        $qb->where($qb->expr()->eq('b.slug', ':slug'))
            ->setParameter('slug', $slug);

        if (null !== $excludeId) {
            $qb->andWhere($qb->expr()->neq('b.id', ':id'))
                ->setParameter('id', $excludeId);
        }

        $result = $qb->getQuery()->getResult();

        return count($result) ? false : true;
    }
}
